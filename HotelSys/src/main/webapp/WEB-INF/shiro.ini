[main]
authc.loginUrl = /login.xhtml
authc.successUrl=/Home.xhtml?faces-redirect=true

authc.usernameParam = userName
authc.passwordParam = password

# Create JDBC realm.
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm

# Configure JDBC realm datasource.
dataSource = org.postgresql.ds.PGSimpleDataSource
dataSource.url = jdbc:postgresql://localhost:5432/hotelsys
dataSource.user = postgres
dataSource.password = at14
jdbcRealm.dataSource = $dataSource

#Habilitando o shiro para comparar senhas "hasheadas"
# define matcher matching hashes instead of passwords
sha256Matcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
sha256Matcher.hashAlgorithmName=SHA-256
# enable matcher in iniRealm (object responsible for authentication)
iniRealm.credentialsMatcher = $sha256Matcher

#Tirado de http://www.javacodegeeks.com/2012/05/apache-shiro-part-1-basics.html
# replace form authentication filter with verbose filter 
authc = com.ambiciousteam.hotelsys.util.shiro.MyFormAuthenticationFilter
# request parameter with login error information; if not present filter assumes 'shiroLoginFailure'
authc.failureKeyAttribute=simpleShiroApplicationLoginFailure

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

[users]
Admin=6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b,Adm

[urls]
/HotelSys/**=authc
/login.xhtml = authc
/logout = logout